{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-transmute","title":"ckanext-transmute","text":"<p>Pipeline for data validation and conversion using schemas.</p> <p>Read the documentation for a full user guide.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>Install the extension <pre><code>pip install ckanext-transmute\n</code></pre></p> <p>Add <code>transmute</code> to the list of enabled plugins in the CKAN config file.</p> <p>Transform data using inline schema <pre><code>ckanapi action tsm_transmute root=example \\\n    data:'{\"greeting\": \"hello\"}' \\\n    schema:'{\n  \"root\": \"example\",\n  \"types\": {\n    \"example\": {\n      \"fields\": {\n        \"message\": {\n          \"validate_missing\": true,\n          \"validators\": [\n            [\n              \"tsm_concat\",\n              \"$greeting\",\n              \", \",\n              \"$name\",\n              \"!\"\n            ]\n          ],\n          \"weight\": 2\n        },\n        \"name\": {\n          \"default\": \"transmute\"\n        },\n        \"greeting\": {\n          \"default\": \"Hi\"\n        }\n      },\n      \"post-fields\": {\n        \"greeting\": {\n          \"remove\": true\n        },\n        \"name\": {\n          \"remove\": true\n        }\n      }\n    }\n  }\n}'\n</code></pre></p>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>Install the extension</p> <pre><code>git clone https://github.com/DataShades/ckanext-transmute.git\ncd ckanext-transmute\npip install -e '.[dev]'\n</code></pre> <p>Run tests</p> <pre><code>pytest\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#transmute.logic.action.tsm_transmute","title":"<code>tsm_transmute(context, data_dict)</code>","text":"<p>Transmute data using the schema.</p> <p>The function creates a deep copy of the data and performs all modifications on the copy.</p> PARAMETER DESCRIPTION <code>data</code> <p>A data dict to transmute</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>schema</code> <p>schema to transmute data</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>root</code> <p>a root schema type</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Transmuted data</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#v170-2024-10-30","title":"v1.7.0 - 2024-10-30","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>add map_value transmutator (e1c5e4d by Sergey Motornyuk).</li> <li>combine default and default_from (7fabb18 by Sergey Motornyuk).</li> <li>add stop_on_empty transmutator (ea07550 by Sergey Motornyuk).</li> <li>add schema drop_unknown_fields (4b14b09 by Sergey Motornyuk).</li> <li>add weight to fields (963f36f by Sergey Motornyuk).</li> <li>add named schemas (30cc544 by Sergey Motornyuk).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>default overrides value (bf581e4 by Sergey Motornyuk).</li> <li>falsy values cannot be used as default (41e08ab by Sergey Motornyuk).</li> <li>tsm_transmute action ignores custom root (c21b6d3 by Sergey Motornyuk).</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#ckanexttransmuteschemaname","title":"<code>ckanext.transmute.schema.&lt;NAME&gt;</code>","text":"<p>Path to the JSON file with definition of the named schema.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 no 2.10 yes 2.11 yes master yes <p>Note</p> <p>It's recommended to install the extension via pip. If you are using GitHub version of the extension, stick to the vX.Y.Z tags to avoid breaking changes. Check the changelog before upgrading the extension.</p>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>Install the extension</p> <pre><code>pip install ckanext-transmute\n</code></pre> <p>Add <code>transmute</code> to the <code>ckan.plugins</code> setting in your CKAN config file.</p>"},{"location":"interfaces/","title":"Interfaces","text":""},{"location":"interfaces/#transmute.interfaces.ITransmute","title":"<code>ITransmute</code>","text":"<p>Main extension point of ckanext-transmute.</p>"},{"location":"interfaces/#transmute.interfaces.ITransmute.get_transmutation_schemas","title":"<code>get_transmutation_schemas()</code>","text":"<p>Register definitions of named schemas.</p> <p>These schemas can be reffered by name in code. In this way you can define static schema and apply in multiple places it to arbitrary data.</p> Example <pre><code>def get_transmutation_schemas(self):\n    person = {\n        \"fields\": {\n            \"age\": {\"validators\": [\"int_validator\"]},\n            \"name\": {\"default\": \"John Doe\"},\n        }\n    }\n\n    schema = {\n        \"root\": \"person\",\n        \"types\": {\"person\": person}\n    }\n\n    return {\"person\": schema}\n</code></pre> RETURNS DESCRIPTION <code>dict[str, dict[str, Any]]</code> <p>Mapping with definitions of named schemas.</p>"},{"location":"interfaces/#transmute.interfaces.ITransmute.get_transmutators","title":"<code>get_transmutators()</code>","text":"<p>Register custom transmutation functions.</p> Example <pre><code>def get_transmutators(self):\n    return {\n        \"tsm_title_case\": tsm_title_case,\n        \"tsm_is_email\": tsm_is_email\n    }\n</code></pre> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>Mapping with transmutaion functions.</p>"},{"location":"usage/","title":"Overview","text":"<p><code>ckanext-transmute</code> registers an action <code>tsm_transmute</code> to transmute data using the provided conversion scheme. The action doesn't change the original data but creates a new data dict. There are two mandatory arguments: <code>data</code> and <code>schema</code>. <code>data</code> is a data dict you need to transform, and <code>schema</code> contains the rules describing all the transformation steps.</p> <p>Typical use-case for it is transforming existing data, like this:</p> <pre><code>{\n  \"title\": \"Test-dataset\",\n  \"email\": \"test@test.ua\",\n  \"metadata_created\": \"\",\n  \"metadata_modified\": \"\",\n  \"metadata_reviewed\": \"\",\n  \"resources\": [\n    {\n      \"title\": \"test-res\",\n      \"extension\": \"xml\",\n      \"web\": \"https://stackoverflow.com/\",\n      \"sub-resources\": [\n        {\n          \"title\": \"sub-res\",\n          \"extension\": \"csv\",\n          \"extra\": \"should-be-removed\"\n        }\n      ]\n    },\n    {\n      \"title\": \"test-res2\",\n      \"extension\": \"csv\",\n      \"web\": \"https://stackoverflow.com/\"\n    }\n  ]\n}\n</code></pre> <p>into expected data, like this:</p> <pre><code>{\n    \"name\": \"test-dataset\",\n    \"email\": \"test@test.ua\",\n    \"metadata_created\": datetime.datetime(2022, 2, 3, 15, 54, 26, 359453),\n    \"metadata_modified\": datetime.datetime(2022, 2, 3, 15, 54, 26, 359453),\n    \"metadata_reviewed\": datetime.datetime(2022, 2, 3, 15, 54, 26, 359453),\n    \"attachments\": [\n        {\n            \"name\": \"test-res\",\n            \"format\": \"XML\",\n            \"url\": \"https://stackoverflow.com/\",\n            \"sub-resources\": [{\"name\": \"SUB-RES\", \"format\": \"CSV\"}]\n        },\n        {\n            \"name\": \"test-res2\",\n            \"format\": \"CSV\",\n            \"url\": \"https://stackoverflow.com/\"\n        }\n    ]\n}\n</code></pre> <p>To achieve this goal, the following schema definition can be used: <pre><code>{\n    \"root\": \"Dataset\",\n    \"types\": {\n        \"Dataset\": {\n            \"fields\": {\n                \"title\": {\n                    \"validators\": [\n                        \"tsm_string_only\",\n                        \"tsm_to_lowercase\",\n                        \"tsm_name_validator\",\n                    ],\n                    \"map\": \"name\",\n                },\n                \"resources\": {\n                    \"type\": \"Resource\",\n                    \"multiple\": True,\n                    \"map\": \"attachments\",\n                },\n                \"metadata_created\": {\n                    \"validators\": [\"tsm_isodate\"],\n                    \"default\": \"2022-02-03T15:54:26.359453\",\n                },\n                \"metadata_modified\": {\n                    \"validators\": [\"tsm_isodate\"],\n                    \"default_from\": \"metadata_created\",\n                },\n                \"metadata_reviewed\": {\n                    \"validators\": [\"tsm_isodate\"],\n                    \"replace_from\": \"metadata_modified\",\n                },\n            }\n        },\n        \"Resource\": {\n            \"fields\": {\n                \"title\": {\n                    \"validators\": [\"tsm_string_only\"],\n                    \"map\": \"name\",\n                },\n                \"extension\": {\n                    \"validators\": [\"tsm_string_only\", \"tsm_to_uppercase\"],\n                    \"map\": \"format\",\n                },\n                \"web\": {\n                    \"validators\": [\"tsm_string_only\"],\n                    \"map\": \"url\",\n                },\n                \"sub-resources\": {\n                    \"type\": \"Sub-Resource\",\n                    \"multiple\": True,\n                },\n            },\n        },\n        \"Sub-Resource\": {\n            \"fields\": {\n                \"title\": {\n                    \"validators\": [\"tsm_string_only\", \"tsm_to_uppercase\"],\n                    \"map\": \"name\",\n                },\n                \"extension\": {\n                    \"validators\": [\"tsm_string_only\", \"tsm_to_uppercase\"],\n                    \"map\": \"format\",\n                },\n                \"extra\": {\n                    \"remove\": True,\n                },\n            }\n        },\n    },\n}\n</code></pre></p> <p>This is an example of schema with nested types. The <code>root</code> field defines the type of the outer layer of data, while <code>sub-resources</code> field inside the definition of the root type contain <code>type</code> references to <code>Sub-Resource</code> definition.</p>"},{"location":"usage/schema/","title":"Schema","text":"<p>Transmutation schema represented by a dictionary that contains descriptions of all data types used for transmutation and the name of the <code>root</code> type.</p> <pre><code>{\n    \"root\": \"main\",\n    \"types\": {\n        \"main\": {},\n        \"secondary\": {}\n    }\n}\n</code></pre> <p>The <code>root</code> type is used for the initial transformation. If, during this transformation, some of multi-values fields contain reference to other types defined in schema, these types will be used for further transformation of data.</p> <pre><code>{\n    \"root\": \"main\",\n    \"types\": {\n        \"main\": {\n            \"drop_unknown_fields\": true,\n            \"fields\": {\n                \"child\": {\"type\": \"secondary\", \"multiple\": true}\n            }\n        },\n        \"secondary\": {\n            \"drop_unknown_fields\": true,\n            \"fields\": {\"name\": {}}\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>At the moment, only multivalued fields can be transformed using nested types. In future support for single-valued nested field will be added</p>"},{"location":"usage/transmutators/","title":"Transmutators","text":"<p>Transmutators are similar to CKAN validators. They accept the field and modify it. But unlike validators, transmutators work with field and have access to the whole schema definition.</p> <p>Usually, transmutator is defined as a function with a single argument. This argument always receives the instance of validated field. It's a dataclass with</p> <ul> <li><code>field_name</code>: the name of processed field</li> <li><code>value</code>: current value of the field</li> <li><code>type</code>: the name of the type that contains field definition</li> <li><code>data</code>: the whole data dictionary that is currently transmuted</li> </ul> <p>To apply transmutator, add its name to the <code>validators</code> attribute of the field definition in transmutation schema:</p> <pre><code>{\n    ...,\n    \"fields\": {\n        \"my_field\": {\n            \"validators\": [\"my_transmutator\"]\n        }\n    }\n}\n</code></pre> <p>When you need to pass additional arguments to transmutator, use the list of name and additional parameters instead of string with name:</p> <pre><code>{\n    ...,\n    \"fields\": {\n        \"my_field\": {\n            \"validators\": [\n                \"simple_transmutator\",\n                [\"complex_transmutator\", 42, \"hello_world\"]\n            ]\n        }\n    }\n}\n</code></pre> <p>In the last example, first transmutator will be called as <code>simple_transmutator(field)</code>, while second one as <code>complex_transmutator(field, 42, \"hello_world\")</code></p> <p>To pass into transmutator the value of the current field, pass <code>\"$self\"</code> as an argument. In the similar manner, <code>\"$field_name\"</code> sends value of the <code>field_name</code> into transmutator:</p> <pre><code>{\n    ...,\n    \"fields\": {\n        \"my_field\": {\n            \"validators\": [\n                [\"complex_transmutator\", \"$self\", \"$other_field\", 0]\n            ]\n        },\n        \"other_field\": {\"default\": 42}\n    }\n}\n</code></pre> <p>In this case, transmutator will be called as <code>complex_transmutator(field, &lt;VALUE OF CURRENT FIELD&gt;, &lt;VALUE OF other_field&gt;, 0)</code>.</p> <p>Transmutator modifies field in place and returns the whole field when job is done.</p> <p>ckanext-transmute contains a number of transmutators that can be used without additional configuration. And if you need more, you can define a custom transmutator with the <code>ITransmute</code> interface.</p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_concat","title":"<code>tsm_concat(field, *strings)</code>","text":"<p>Concatenate strings to build a new one.</p> Example <p>Greet the value in form <code>Hello VALUE!</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_concat\", \"Hello \", \"$self\", \"!\"]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>strings</code> <p>strings to concat with</p> <p> TYPE: <code>Any</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with new value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_get_nested","title":"<code>tsm_get_nested(field, *path)</code>","text":"<p>Fetches a nested value from a field.</p> Example <p>Assuming <code>field.value</code> contains <code>{\"a\": {\"b\": [1, 2, 3]}}</code>, extract element with key <code>a</code>, from it take element with key <code>b</code>, than get the element with index <code>1</code>. In the end, value is replaced by <code>2</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_get_nested\", \"a\", \"b\", \"1\"]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>path</code> <p>Iterable with path segments</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> RAISES DESCRIPTION <code>Invalid</code> <p>raises if path doesn't exist</p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with new value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_isodate","title":"<code>tsm_isodate(field)</code>","text":"<p>Validates datetime string Mutates an iso-like string to datetime object.</p> Example <p>Transform <code>\"2022-01-01\"</code> into <code>datetime(year=2022, month=1, day=1)</code>. <pre><code>{\"validators\": [\"tsm_isodate\"]}\n</code></pre></p> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RAISES DESCRIPTION <code>Invalid</code> <p>raises if date format is incorrect</p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with casted value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_list_mapper","title":"<code>tsm_list_mapper(field, mapping, remove=False)</code>","text":"<p>Maps values within a list to corresponding values from the provided dictionary.</p> Example <p>Replace <code>[\"Finn\", \"Jake\"]</code> with <code>[\"human\", \"dog\"]</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_list_mapper\", {\"Finn\": \"human\", \"Jake\": \"dog\"}]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>mapping</code> <p>A dictionary representing the mapping of values.</p> <p> TYPE: <code>dict[Any, Any]</code> </p> <code>remove</code> <p>If set to True, removes values from the list if they don't have a corresponding mapping. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_map_value","title":"<code>tsm_map_value(field, test_value, if_same, if_different=SENTINEL)</code>","text":"<p>Replace special value with other value.</p> Example <p>Replace <code>me</code> with <code>COOL USER</code>, and any other value with <code>user</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_map_value\", \"me\", \"COOL USER\", \"user\"]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>test_value</code> <p>value that will be compared to <code>field.value</code></p> <p> TYPE: <code>Any</code> </p> <code>if_same</code> <p>value to use if test_value matches the <code>field.value</code></p> <p> TYPE: <code>Any</code> </p> <code>if_different</code> <p>value to use if test_value does not matche the <code>field.value</code>. Leave empty to keep original value of the field.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>SENTINEL</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_mapper","title":"<code>tsm_mapper(field, mapping, default=None)</code>","text":"<p>Replace a value with a different value.</p> <p>The initial value must serve as a key within a mapping dictionary, while the dict value will represent the updated value.</p> Example <p>Replace <code>Finn</code> with <code>human</code>, and <code>Jake</code> with <code>dog</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_mapper\", {\"Finn\": \"human\", \"Jake\": \"dog\"}]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>mapping</code> <p>A dictionary representing the mapping of values.</p> <p> TYPE: <code>dict[Any, Any]</code> </p> <code>default</code> <p>The default value to be used when the key is not found. If the default value is not provided, the current value will be used as it.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with new value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_name_validator","title":"<code>tsm_name_validator(field)</code>","text":"<p>Wrapper over CKAN default <code>name_validator</code> validator.</p> Example <p>Raise an error for <code>NOT A VALID NAME</code>, but accept <code>not-a-valid-name</code>. <pre><code>{\"validators\": [\"tsm_name_validator\"]}\n</code></pre></p> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RAISES DESCRIPTION <code>Invalid</code> <p>if <code>value</code> is not a valid name</p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field object if it's valid</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_stop_on_empty","title":"<code>tsm_stop_on_empty(field)</code>","text":"<p>Stop transmutation if field is empty.</p> Example <p>Accept the current value and do not call the rest of transmutators if value is represented by falsy object(0, null, empty string, empty list, etc.)</p> <pre><code>{\"validators\": [\n    \"tsm_stop_on_empty\",\n    \"i_am_called_with_nonempty_values_only\"\n]}\n\n{\"validators\": [\n    \"tsm_to_string\",\n    \"tsm_stop_on_empty\",\n    \"only_nonempty_strings_come_here\"\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_string_only","title":"<code>tsm_string_only(field)</code>","text":"<p>Validates if <code>field.value</code> is string.</p> Example <p>Raise an error for <code>1</code> but accept <code>\"1\"</code>. <pre><code>{\"validators\": [\"tsm_string_only\"]}\n</code></pre></p> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RAISES DESCRIPTION <code>Invalid</code> <p>raises is the <code>field.value</code> is not string</p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field object if it's valid</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_to_lowercase","title":"<code>tsm_to_lowercase(field)</code>","text":"<p>Casts string value to lowercase.</p> Example <p>Transform <code>HeLlO</code> to <code>hello</code>. <pre><code>{\"validators\": [\"tsm_to_lowercase\"]}\n</code></pre></p> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>Field object with mutated string</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_to_string","title":"<code>tsm_to_string(field)</code>","text":"<p>Casts <code>field.value</code> to str.</p> Example <p>Transform <code>[1, 2, 3]</code> into string <code>\"[1, 2, 3]\"</code>. Note, that <code>null</code> as missing value will turn into string <code>\"None\"</code>.</p> <pre><code>{\"validators\": [\"tsm_to_string\"]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with new value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_to_uppercase","title":"<code>tsm_to_uppercase(field)</code>","text":"<p>Casts string value to uppercase.</p> Example <p>Transform <code>HeLlO</code> to <code>HELLO</code>. <pre><code>{\"validators\": [\"tsm_to_uppercase\"]}\n</code></pre></p> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>Field object with mutated string</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_trim_string","title":"<code>tsm_trim_string(field, max_length)</code>","text":"<p>Trim string lenght.</p> Example <p>Keep only first 5 characters in the <code>hello world</code>, turning it into <code>hello</code>.</p> <pre><code>{\"validators\": [\n    [\"tsm_trim_string\", 5]\n]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> <code>max_length</code> <p>String max length</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field object if it's valid</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/transmutators/#transmute.transmutators.tsm_unique_only","title":"<code>tsm_unique_only(field)</code>","text":"<p>Preserve only unique values from list.</p> Example <p>Remove duplicates from <code>[1, 1, 2, 1, 2, 2, 1, 3]</code>, keeping <code>[1, 2, 3]</code>.</p> <pre><code>{\"validators\": [\"tsm_unique_only\"]}\n</code></pre> PARAMETER DESCRIPTION <code>field</code> <p>Field object</p> <p> TYPE: <code>Field</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>the same Field with new value</p> <p> TYPE: <code>Field</code> </p>"},{"location":"usage/type/","title":"Type","text":"<p>Type description contains definition of its fields and a number of additional settings.</p> <pre><code>{\n    \"root\": \"main\",\n    \"types\": {\n        \"main\": {\n            \"drop_unknown_fields\": true,\n            \"fields\": {\n                \"first\": {},\n                \"second\": {}\n            }\n        }\n    }\n}\n</code></pre> <p>Every field either refers a different type if it's definded with <code>multiple: true</code> and <code>type: TYPE_NAME</code>, or contains inline definition. Inline fields are used most often and their definition is flexible enough to cover majority of use-cases.</p> <pre><code>{\n    \"root\": \"main\",\n    \"types\": {\n        \"main\": {\n            \"fields\": {\n                \"inline_field\": {\"default\": 42},\n                \"sub_type\": {\"multiple\": true, \"type\": \"secondary\"}\n            }\n        },\n        \"secondary\": {}\n    }\n}\n</code></pre> <p>Here's the list of attributes that can be used in the field definition:</p> Attribute Description <code>map</code> New name of the field <code>validators</code> List of transmutators applied to the field <code>remove</code> Flag that removes field from data when enabled <code>default</code> Default value if field is missing <code>default_from</code> Name of the field used as source of default value <code>value</code> Static value that replaces any existing value of the field <code>replace_from</code> Name of the field used as a source of value <code>validate_missing</code> Flag that applies validation even if data does not contains the field <code>weight</code> Weight that controls order of field processing"}]}